
<Table Item="Order" Items="orders" PageSize="10" 
       @bind-SelectedItems="selectedOrders" Selectable
       MultiSelect Hover Responsive
       >
    <HeaderTemplate>
        <strong>Orders</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="Order" Property="e=>e.Customer.CustomerName" Title="Customer" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Customer.CustomerName" />
            </EditorTemplate>
        </Column>
        <Column Item="Order" Property="e=>e.Country" Title="Country" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Country" />
            </EditorTemplate>
        </Column>
        <Column Item="Order" Property="e=>e.OrderType" Title="Order type" Sortable Searchable Groupable>
            <EditorTemplate>
                <Select Items="EnumHelper.GetList<OrderType>()" @bind-SelectedValue="@context.OrderType" TextExpression="e=> e.ToString()" ValueExpression="e=> e" Clearable />
            </EditorTemplate>
        </Column>
    </ChildContent>

</Table>


<ul class="mt-2">
    @foreach (var order in selectedOrders)
    {
        <h3>Order: @order.OrderId - @order.Customer?.CustomerName</h3>
        <ObjectBrowser Object="order"></ObjectBrowser>
    }
</ul>

@code {

    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    private static List<Order> orders = SampleData.GetOrders();
    private static List<Order> selectedOrders = new List<Order>();

    private async Task OnItemEdit(Order order)
    {
        await TablerService.ShowAlert($"Edited order {order.OrderId}");
    }

    private async Task OnItemAdd(Order order)
    {
        await TablerService.ShowAlert($"Added order {order.OrderId}");
    }

    private async Task OnItemDelete(Order order)
    {
        await TablerService.ShowAlert($"Order deleted {order.OrderId}");
    }

    private Task<Order> AddItem()
    {

        return Task.FromResult(new Order { Customer = new Customer { CustomerName = "New customer" } });

    }
}