@using Align = TabBlazor.Align

<Table Item="Order" Items="orders" PageSize="10" 
       @bind-SelectedItems="selectedOrders" OnItemDeleted="OnItemDelete"
       ShowCheckboxes MultiSelect Hover Responsive>
    <HeaderTemplate>
        <strong>Orders</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="Order" Property="e=>e.Customer.CustomerName" Sortable Searchable Groupable>
            <HeaderTemplate>
                <span>
                    <Icon class="me-1" IconType="@TablerIcons.Ticket" />
                    Customer
                </span>
            </HeaderTemplate>
            
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Customer.CustomerName" />
            </EditorTemplate>
        </Column>
        <Column Item="Order" Property="e=>e.Country" Sortable Searchable Groupable SearchExpression="(e, s) => SearchCountry(e,s)">
            <HeaderTemplate>
                <span>
                    <Icon class="me-1" IconType="@TablerIcons.Flag" />
                    Country
                </span>
            </HeaderTemplate>
            
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Country" />
            </EditorTemplate>
        </Column>
        
        <Column Item="Order" Property="e=>e.NetValue" Align="Align.End" Sortable Searchable>
            <HeaderTemplate>
                <span>
                    <Icon class="me-1" IconType="@TablerIcons.Report_money" />
                    <Icon class="me-1" IconType="@TablerIcons.Report_money" />
                    <Icon class="me-1" IconType="@TablerIcons.Report_money" />
                </span>
            </HeaderTemplate>
            
            <Template>
                $@context.NetValue.ToString("N0")
            </Template>
        </Column>
  
        <Column Item="Order" Property="e=>e.OrderType" Title="Order type" Sortable Searchable Groupable>
            <EditorTemplate>
                <Select Items="EnumHelper.GetList<OrderType>()" @bind-SelectedValue="@context.OrderType" TextExpression="e=> e.ToString()" ValueExpression="e=> e" Clearable />
            </EditorTemplate>
        </Column>
    </ChildContent>
</Table>


<ul>
    @foreach (var order in selectedOrders)
    {
        <li>@order.OrderId, @order.Customer.CustomerName</li>
    }
</ul>

@code {

    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] TabBlazor.Services.IModalService ModalService { get; set; }
    private static List<Order> orders = SampleData.GetOrders();
    private static List<Order> selectedOrders = new List<Order>();


    private async Task OnItemDelete(Order order)
    {
        await ShowDialog($"Order deleted {order.OrderId}");
    }

    private bool SearchCountry(Order order, string search)
    {
        var t = order;
        return false;
    }

    private async Task ShowDialog(string title)
    {
        await ModalService.ShowDialogAsync(new TabBlazor.Components.Modals.DialogOptions
            {
                CancelText = "",
                StatusColor = TablerColor.Primary,
                IconType = TablerIcons.Info_circle,
                MainText = title
            });
    }


}