@using System.IO;
@using ClosedXML.Excel;
@using TabBlazor.Dashboards


<Dashboard TItem=Order Items="orders" OnUpdate="DashboardUpdated" Debug>
    <h2 class="page-title mb-2">
        Dashboard
    </h2>

    <span class="text-secondary">
        Filter: @context.LastRunFilterMilliseconds ms
    </span>

    <span class="text-secondary">
        <Icon IconType="MDIcons.Microsoft_excel" OnClick="@(() => DownloadExcel(context.FilteredItems))" Color="#1D6F42" />
    </span>

    <Row>
        <RowCol Lg="2">
            <Card Size=CardSize.Small class="h-100">
                <EqualFacet TItem=Order Expression="e => e.OrderType" Name="Order Type:"   />
                    <EqualFacet TItem=Order Expression="e=> e.OrderStatus" Name="Order Status:" SortFilters="@(f => f.OrderBy(e=> e.CountAll))" />
                    <EqualFacet TItem=Order Expression="e=> e.Country" Name="Country:" />
                    <GroupFacet TItem=Order Expression="e=> e.NetValue" Name="Net Value:" />
                    <RangeFilter TItem=Order Expression="e=> e.DiscountPercentage" Name="Discount %" />
                    <DateFacet TItem=Order Expression="e=> e.OrderDate.DateTime" Name="Order Date:" />
            </Card>

        </RowCol>
        <RowCol Lg=10>

            <Row class="row-deck row-cards">
                <RowCol Sm="6" Lg="3">
                    <Card Size="CardSize.Small">
                        <CardBody>
                            <div class="row align-items-center">
                                <RowCol Auto>
                                    <span class="bg-primary text-white avatar">
                                        <Icon IconType="TablerIcons.Currency_dollar" />
                                    </span>
                                </RowCol>

                                <div class="col">
                                    <h3 class="mb-0">
                                        @context.FilteredItems.Sum(e => e.NetValue).ToString("n0") Net Sales
                                    </h3>
                                    <div class="text-secondary">
                                        @context.FilteredItems.Sum(e => e.GrossValue).ToString("n0") Gross Sales
                                    </div>
                                </div>
                            </div>
                        </CardBody>
                    </Card>
                </RowCol>

                <RowCol Sm="6" Lg="3">
                    <Card Size="CardSize.Small">
                        <CardBody>
                            <div class="row align-items-center">
                                <RowCol Auto>
                                    <span class="bg-success text-white avatar">
                                        <Icon IconType="TablerIcons.Shopping_cart" />
                                    </span>
                                </RowCol>

                                <div class="col">
                                    <h3 class="mb-0">
                                        @context.FilteredItems.Count().ToString("n0") Orders
                                    </h3>
                                    <div class="text-secondary">
                                        @context.FilteredItems.Where(e=> e.OrderStatus == OrderStatus.Cancelled).Count().ToString("n0") Cancelled
                                    </div>
                                </div>
                            </div>
                        </CardBody>
                    </Card>
                </RowCol>

                <RowCol Sm="6" Lg="3">
                    <Card Size="CardSize.Small">
                        <CardBody>
                            <div class="row align-items-center">
                                <RowCol Auto>
                                    <span class="bg-azure text-white avatar">
                                        <Icon IconType="TablerIcons.Users" />
                                    </span>
                                </RowCol>

                                <div class="col">
                                    <h3 class="mb-0">
                                        @context.FilteredItems.DistinctBy(e=> e.Customer.CustomerId).Count().ToString("n0") Customers
                                    </h3>
                                    <div class="text-secondary">
                                        @context.FilteredItems.DistinctBy(e=> e.Country).Count().ToString("n0") Countries
                                    </div>
                                </div>
                            </div>
                        </CardBody>
                    </Card>
                </RowCol>

                <RowCol Sm="6" Lg="3">
                    <Card Size="CardSize.Small">
                        <CardBody>
                            <div class="row align-items-center">
                                <RowCol Auto>
                                    <span class="bg-yellow text-white avatar">
                                        <Icon IconType="TablerIcons.Star" />
                                    </span>
                                </RowCol>

                                <div class="col">
                                    @{
                                        var topCustomer = @context.FilteredItems.GroupBy(e => e.Customer).Select(e => new { Customer = e.Key, Value = e.Aggregate(0.0M, (current, order) => current + order.NetValue) }).OrderByDescending(e => e.Value).FirstOrDefault();

                                            <h3 class="mb-0">
                                            @topCustomer?.Customer.CustomerName
                                            </h3>
                                            <div class="text-secondary">
                                            @topCustomer?.Value.ToString("n0")
                                            </div>

                                    }


                                </div>
                            </div>
                        </CardBody>
                    </Card>
                </RowCol>

                <RowCol Sm="12" Lg="4">
                    <Card Size="CardSize.Small">
                        <CardBody>
                            <div class="row align-items-top">

                                <RowCol Lg="7" Xs="12">
                                    <div class="d-flex align-items-center">
                                        <div class="subheader">Net Sales</div>
                                        <div class="ms-auto lh-1">
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-baseline">
                                        <div class="h1 mb-3 me-2"> @context.FilteredItems.Sum(e => e.NetValue).ToString("c0")</div>

                                    </div>
                                </RowCol>

                                <RowCol Lg="5" Xs="12">
                                    <div>
                                        <ApexChart TItem="Order"
                                                   Options="orderTypeChartOptions"
                                                   @ref=orderTypeChart>

                                            <ApexPointSeries TItem="Order"
                                                             Items="context.FilteredItems"
                                                             Name="Order Type"
                                                             SeriesType="SeriesType.Pie"
                                                             XValue="@(e => e.OrderType)"
                                                             YAggregate="@(e => e.Sum(e => e.NetValue))"
                                                             OrderByDescending="e=>e.Y" />
                                        </ApexChart>
                                    </div>
                                </RowCol>


                            </div>
                        </CardBody>
                    </Card>
                </RowCol>


                <RowCol Sm="12" Lg="4">
                    <Card Size="CardSize.Small">
                        <CardBody class="d-flex flex-column">
                            <div class="d-flex align-items-center">
                                <div class="subheader">Discount</div>
                                <div class="ms-auto lh-1">
                                </div>
                            </div>
                            <div class="d-flex flex-grow-1 align-items-stretch">
                                @{
                                    var discount = CalculateDiscount(context.FilteredItems.Sum(e => e.GrossValue), context.FilteredItems.Sum(e => e.NetValue));

                                        <div class="h1 mb-3 me-2">

                                        @if (discount != null)
                                        {
                                                    <span>@((decimal)discount)%</span>
                                        }
                                        else
                                        {
                                                    <span>-</span>
                                        }

                                        </div>

                                    @if (discount != null)
                                    {
                                                <div class="me-auto">
                                                    <span class="text-green d-inline-flex align-items-center lh-1">
                                                        8%
                                                        <Icon class="icon ms-1" IconType="TablerIcons.Trending_up" />
                                                    </span>
                                                </div>
                                    }
                                }
                            </div>


                                <div class="justify-content-end">
                                    <ApexChart TItem="Order"
                                               Options="orderDiscountChartOptions"
                                               @ref=orderDiscountChart
                                           Height="60"
                                               XAxisType="@XAxisType.Datetime">

                                        <ApexPointSeries TItem="Order"
                                                         Items="context.FilteredItems"
                                                         Name="Discount"
                                                         SeriesType="SeriesType.Bar"
                                                         XValue="@(e => e.OrderDate.FirstDayOfMonth())"
                                                         YAggregate="@(e => CalculateDiscount(e.Sum(f => f.GrossValue), e.Sum(f => f.NetValue)))"
                                                         OrderByDescending="e=>e.X" />
                                    </ApexChart>
                                </div>



                        </CardBody>
                    </Card>
                </RowCol>


                <RowCol Sm="12" Lg="4">
                    <Card Size="CardSize.Small">
                        <CardBody>

                            @{
                                var topCustomers = GetTopCustomers(context.FilteredItems);
                                var filteredNetValue = context.FilteredItems.Sum(e => e.NetValue);
                                    <div class="row align-items-top">

                                        <RowCol Lg="7" Xs="12">
                                            <div class="d-flex align-items-center">
                                                <div class="subheader">Top 5 Customers</div>
                                                <div class="ms-auto lh-1">
                                                </div>
                                            </div>
                                            <div class="d-flex align-items-baseline">
                                                <div class="h1 mb-3 me-2">
                                                @if (filteredNetValue > 0)
                                                {
                                                    @(((topCustomers.Sum(e => e.NetValue) / filteredNetValue) * 100).ToString("n2"))

                                                            <span>%</span>
                                                }
                                                else
                                                {
                                                            <span>-</span>
                                                }

                                                </div>
                                            </div>
                                        </RowCol>

                                        <RowCol Lg="5" Xs="12">
                                            <div>

                                                <ApexChart TItem="TopCustomer"
                                                   Options="topCustomerChartOptions"
                                                           @ref=topCustomerChart>

                                                    <ApexPointSeries TItem="TopCustomer"
                                                             Items="@topCustomers"
                                                             Name="Customer"
                                                             SeriesType="SeriesType.Bar"
                                                             XValue="@(e => e.Customer.CustomerName)"
                                                             YValue="@(e => e.NetValue)"
                                                             OrderByDescending="e=>e.Y" />
                                                </ApexChart>

                                            </div>
                                        </RowCol>


                                    </div>
                            }
                        </CardBody>
                    </Card>
                </RowCol>


                <RowCol>

                    <Card>

                        <CardBody>
                            <h3 class="card-title">Orders Value</h3>
                            <ApexChart @ref=chart TItem="Order"
                                       XAxisType="XAxisType.Datetime" Height="200" Options="chartOptions">

                                <ApexPointSeries TItem="Order"
                                                 Items="context.FilteredItems"
                                                 Name="Gross Value"
                                                 SeriesType="SeriesType.Bar"
                                                 XValue="@(e => e.OrderDate.FirstDayOfMonth())"
                                                 YAggregate="@(e => e.Sum(e => e.GrossValue))"
                                                 OrderBy="e=>e.X" />

                                <ApexPointSeries TItem="Order"
                                                 Items="context.FilteredItems"
                                                 Name="Net Value"
                                                 SeriesType="SeriesType.Bar"
                                                 XValue="@(e => e.OrderDate.FirstDayOfMonth())"
                                                 YAggregate="@(e => e.Sum(e => e.NetValue))"
                                                 OrderBy="e=>e.X" />

                            </ApexChart>
                        </CardBody>

                    </Card>



                </RowCol>

                <RowCol>

                    <Table PageSize=5 Item="Order" Items="context.FilteredItems?.ToList()">
                        <Column Item="Order" Property="e=>e.Customer.CustomerName" Searchable Sortable />
                        <Column Item="Order" Property="e=>e.OrderDate" Searchable Sortable>
                            <Template Context="order">
                                @order.OrderDate.ToString("d")
                            </Template>
                        </Column>
                        <Column Item="Order" Property="e=>e.Country" Searchable Sortable />
                        <Column Item="Order" Property="e=>e.OrderType" Searchable Sortable />
                        <Column Item="Order" Property="e=>e.OrderStatus" Searchable Sortable />
                        <Column Item="Order" Property="e=>e.NetValue" Searchable Sortable>
                            <Template Context="order">
                                @order.NetValue.ToString("c")
                            </Template>
                        </Column>
                    </Table>

                </RowCol>
            </Row>



        </RowCol>
    </Row>

</Dashboard>

@code {
    [Inject] public TablerService TablerService { get; set; }
    private List<Order> orders = SampleData.GetOrders(); // SampleData.GeneratedOrders(500000); // SampleData.GetOrders();

    private ApexChart<Order> chart;
    private ApexChartOptions<Order> chartOptions = new();

    private ApexChart<Order> orderTypeChart;
    private ApexChartOptions<Order> orderTypeChartOptions = new();

    private ApexChart<Order> orderDiscountChart;
    private ApexChartOptions<Order> orderDiscountChartOptions = new();

    private ApexChart<TopCustomer> topCustomerChart;
    private ApexChartOptions<TopCustomer> topCustomerChartOptions = new();

    protected override void OnInitialized()
    {
        chartOptions.Theme = new Theme { Palette = PaletteType.Palette6 };
        chartOptions.Chart.Toolbar = new Toolbar { Show = false };
        chartOptions.Yaxis = new List<YAxis> { new YAxis { DecimalsInFloat = 0 } };

        orderTypeChartOptions.Theme = new Theme { Palette = PaletteType.Palette6 };
        orderTypeChartOptions.Chart = new Chart { Sparkline = new ChartSparkline { Enabled = true } };

        orderDiscountChartOptions.Theme = new Theme { Palette = PaletteType.Palette6 };
        orderDiscountChartOptions.Chart = new Chart { Sparkline = new ChartSparkline { Enabled = true } };


        topCustomerChartOptions.Theme = new Theme { Palette = PaletteType.Palette6 };
        topCustomerChartOptions.PlotOptions = new PlotOptions { Bar = new PlotOptionsBar { Horizontal = true, Distributed = true } };
        topCustomerChartOptions.Chart = new Chart { Sparkline = new ChartSparkline { Enabled = true } };
    }

    private string GetFilterLabel(FacetFilter<Order> facetFilter)
    {
        return $"{facetFilter.Filter.Name} - {facetFilter.FilteredItems.Sum(e => e.NetValue).ToString("N0")} ({facetFilter.Items.Sum(e => e.NetValue).ToString("N0")})";
    }

    private async Task DashboardUpdated()
    {
        await Task.Yield();
        await chart?.UpdateSeriesAsync(true);
        await orderTypeChart?.UpdateOptionsAsync(true, true, true);
        await orderDiscountChart?.UpdateSeriesAsync(true);
        await topCustomerChart?.UpdateSeriesAsync(true);
    }

    private decimal? CalculateDiscount(decimal gross, decimal net)
    {
        if (gross == 0) { return null; }
        return Math.Round((gross - net) / gross * 100, 2);
    }

    private List<TopCustomer> GetTopCustomers(IEnumerable<Order> orders)
    {
        return orders.GroupBy(e => e.Customer).Select(g => new TopCustomer
            {
                Customer = g.Key,
                NetValue = g.Select(e => e.NetValue).Aggregate((s1, s2) => s1 + s2)
            }).OrderByDescending(e => e.NetValue).Take(5).ToList();
    }

    private async Task DownloadExcel(IEnumerable<Order> orders)
    {
        var wb = new XLWorkbook();
        var ws = wb.Worksheets.Add("Filtered Orders");

        var toExport = orders.Select(e => new
        {
            e.OrderId,
            e.Country,
            e.OrderDate,
            e.OrderStatus,
            e.OrderType,
            e.Customer.CustomerName,
            e.Customer.CustomerId,
            e.NetValue,
            e.GrossValue,
            e.DiscountPercentage
        });

        ws.Row(1).Style.Font.SetBold();
        ws.Cell(1, 1).InsertTable(toExport, false);

        var bytes = new byte[0];
        using (var ms = new MemoryStream())
        {
            wb.SaveAs(ms);
            bytes = ms.ToArray();
        }

        var bytesBase64 = Convert.ToBase64String(bytes);
        var href = "data:application/octet-stream;base64," + bytesBase64;
        await TablerService.SaveAsFile("Orders Dashboard.xlsx", href);
    }

    private class TopCustomer
    {
        public Customer Customer { get; set; }
        public decimal NetValue { get; set; }

    }

}
